openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: 'http://localhost:8080'
    description: Generated server url
paths:
  '/api/employees/{id}':
    get:
      tags:
        - employee-controller
      operationId: findById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
    put:
      tags:
        - employee-controller
      operationId: modify
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
    delete:
      tags:
        - employee-controller
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/employees:
    get:
      tags:
        - employee-controller
      operationId: findAll
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeDto'
    post:
      tags:
        - employee-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
  '/api/employees/{id}/images':
    post:
      tags:
        - employee-controller
      operationId: uploadImageForEmployee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - content
              type: object
              properties:
                content:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/companies:
    get:
      tags:
        - company-controller
      operationId: findAllCompanies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyDto'
    post:
      tags:
        - company-controller
      operationId: createCompany
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
  '/api/companies/{id}/employees':
    post:
      tags:
        - company-controller
      operationId: addEmployee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
  '/api/images/{id}/{imageid}':
    get:
      tags:
        - image-controller
      operationId: getImage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: imageid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
  '/api/companies/{id}':
    get:
      tags:
        - company-controller
      operationId: findCompanyById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
    delete:
      tags:
        - company-controller
      operationId: deleteCompany
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/login:
    post:
      summary: endpoint for logging in
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      tags:
        - login-controller
      description: returns JWT token
components:
  schemas:
    AddressDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        city:
          type: string
        street:
          type: string
        zipcode:
          type: string
    CompanyDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        employees:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeDto'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressDto'
    EmployeeDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        job:
          type: string
        salary:
          type: number
          format: double
        workStart:
          type: string
          format: date
        company:
          $ref: '#/components/schemas/CompanyDto'
    LoginDto:
      title: LoginDto
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
